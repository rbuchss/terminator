#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long qw(GetOptions);
Getopt::Long::Configure qw(gnu_getopt);
use Data::Dumper qw(Dumper);
use Text::CSV_XS;

my @columns;
my @sanitized_columns;
my @index;
my @sanitized_index;
my $delim = "\t";
my $no_filenames;
my $no_headers;
my $no_fileheaders;
my $limit;

GetOptions(
  'fields|columns|c|f:s@' => \@columns,
  'index|i:s@' => \@index,
  'delim|d:s' => \$delim,
  'no-filenames' => \$no_filenames,
  'no-headers' => \$no_headers,
  'n' => \$no_fileheaders,
  'limit|l:i' => \$limit,
) or die "Usage: $0\n";

sub better_cut {
  my ($data) = @_;
  my $csv = Text::CSV_XS->new({ sep_char => $delim,
      binary             => 1,
      allow_loose_quotes => 1,
      blank_is_undef     => 1 });

  my @headers = $csv->column_names ($csv->getline ($data));  # use header
  my @cols = @sanitized_columns;
  foreach my $i (@sanitized_index) {
    my $header_length = scalar(@headers);
    die "fatal error index: $i out of bounds; columns only go to $header_length\n" unless $header_length >= $i;
    push @cols, $headers[$i-1];
  }
  # check for valid params
  my $array_len = scalar(@cols);
  my $array_index = 0;
  foreach my $column (@cols) {
    die "fatal error column: $column not found in possible headers: @headers\n" unless
    grep { $_ eq $column } $csv->column_names;
    unless ($no_fileheaders or $no_headers) {
      print "$column";
      print "\t" unless $array_index eq $array_len-1;
      $array_index ++;
    }
  }
  print "\n" unless $no_fileheaders or $no_headers;

  my $line_num = 2; # starts at 2 since header is line 1
  while (not $csv->eof) {
    my $row = $csv->getline_hr ($data);
    if ($row) {
      my $array_index = 0;
      foreach my $column (@cols) {
        my $value = $row->{$column} // '';
        print "$value";
        print "\t" unless $array_index eq $array_len-1;
        $array_index ++;
      }
      print "\n" unless ($csv->eof);
    } else {
      warn "WARNING: Line #: $line_num could not be parsed\n" unless ($csv->eof);
    }
    $line_num += 1;
    last if $limit and $limit <= ($line_num-2);
  }
  close $data;
}

# sanitize inputs
foreach my $i (@index) {
  my @i_parsed = split /,/, $i;
  foreach my $elm (@i_parsed) {
    if ($elm =~ /-/) {
      my @i_range = split /-/, $elm;
      die "Range: $i invalid" if scalar(@i_range) > 2;
      push(@sanitized_index, ($i_range[0] .. $i_range[1]));
    } else {
      push(@sanitized_index, $elm);
    }
  }
}

foreach my $c (@columns) {
  my @c_parsed = split /,/, $c;
  push(@sanitized_columns, @c_parsed);
}

if (@ARGV) {
  foreach my $file (@ARGV) {
    my $data;
    print "==> $file <==\n" unless $no_fileheaders or $no_filenames;
    die "Could not open '$file' $!\n" unless (-e $file);
    if ($file =~ /\.gz$/) {
      open($data, "gunzip -c $file |");
    } else {
      open($data, '<', $file);
    }
    better_cut $data;
  }
} else {
    print "==> STDIN <==\n" unless $no_fileheaders or $no_filenames;
    die 'No STDIN pipe or files found' if (-z STDIN);
    open(my $data, '<-');
    better_cut $data;
}
